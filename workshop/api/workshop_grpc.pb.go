// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package workshop

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WorkshopClient is the client API for Workshop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkshopClient interface {
	AcceptCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*empty.Empty, error)
	PaintCar(ctx context.Context, in *PaintCarRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RetrieveCar(ctx context.Context, in *RetrieveCarRequest, opts ...grpc.CallOption) (*Car, error)
	// CarPainted is gRPC only endpoint, used as a callback from Sub workshop
	CarPainted(ctx context.Context, in *PaintFinishedRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type workshopClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkshopClient(cc grpc.ClientConnInterface) WorkshopClient {
	return &workshopClient{cc}
}

func (c *workshopClient) AcceptCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/demo.workshop.Workshop/AcceptCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopClient) PaintCar(ctx context.Context, in *PaintCarRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/demo.workshop.Workshop/PaintCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopClient) RetrieveCar(ctx context.Context, in *RetrieveCarRequest, opts ...grpc.CallOption) (*Car, error) {
	out := new(Car)
	err := c.cc.Invoke(ctx, "/demo.workshop.Workshop/RetrieveCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopClient) CarPainted(ctx context.Context, in *PaintFinishedRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/demo.workshop.Workshop/CarPainted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkshopServer is the server API for Workshop service.
// All implementations must embed UnimplementedWorkshopServer
// for forward compatibility
type WorkshopServer interface {
	AcceptCar(context.Context, *Car) (*empty.Empty, error)
	PaintCar(context.Context, *PaintCarRequest) (*empty.Empty, error)
	RetrieveCar(context.Context, *RetrieveCarRequest) (*Car, error)
	// CarPainted is gRPC only endpoint, used as a callback from Sub workshop
	CarPainted(context.Context, *PaintFinishedRequest) (*empty.Empty, error)
	mustEmbedUnimplementedWorkshopServer()
}

// UnimplementedWorkshopServer must be embedded to have forward compatible implementations.
type UnimplementedWorkshopServer struct {
}

func (UnimplementedWorkshopServer) AcceptCar(context.Context, *Car) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptCar not implemented")
}
func (UnimplementedWorkshopServer) PaintCar(context.Context, *PaintCarRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaintCar not implemented")
}
func (UnimplementedWorkshopServer) RetrieveCar(context.Context, *RetrieveCarRequest) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCar not implemented")
}
func (UnimplementedWorkshopServer) CarPainted(context.Context, *PaintFinishedRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CarPainted not implemented")
}
func (UnimplementedWorkshopServer) mustEmbedUnimplementedWorkshopServer() {}

// UnsafeWorkshopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkshopServer will
// result in compilation errors.
type UnsafeWorkshopServer interface {
	mustEmbedUnimplementedWorkshopServer()
}

func RegisterWorkshopServer(s *grpc.Server, srv WorkshopServer) {
	s.RegisterService(&_Workshop_serviceDesc, srv)
}

func _Workshop_AcceptCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopServer).AcceptCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.workshop.Workshop/AcceptCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopServer).AcceptCar(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workshop_PaintCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaintCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopServer).PaintCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.workshop.Workshop/PaintCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopServer).PaintCar(ctx, req.(*PaintCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workshop_RetrieveCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopServer).RetrieveCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.workshop.Workshop/RetrieveCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopServer).RetrieveCar(ctx, req.(*RetrieveCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workshop_CarPainted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaintFinishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopServer).CarPainted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.workshop.Workshop/CarPainted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopServer).CarPainted(ctx, req.(*PaintFinishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Workshop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo.workshop.Workshop",
	HandlerType: (*WorkshopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptCar",
			Handler:    _Workshop_AcceptCar_Handler,
		},
		{
			MethodName: "PaintCar",
			Handler:    _Workshop_PaintCar_Handler,
		},
		{
			MethodName: "RetrieveCar",
			Handler:    _Workshop_RetrieveCar_Handler,
		},
		{
			MethodName: "CarPainted",
			Handler:    _Workshop_CarPainted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/workshop.proto",
}
